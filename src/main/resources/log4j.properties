##级别一般建议设成error，warn，info，debug中间的一种
##ServerDailyRollingFile,为每天生成一个日志文件，这个也比较符合大部分的场景。
#stdout，是配置在console输出的
log4j.rootLogger=info, ServerDailyRollingFile, stdout 
#RollingFileAppender使用MaxFileSize设置一个日志文件的最大大小，当产生多个日志时，会在日志名称后面加上".1"、".2"
#DailyRollingFileAppender 特点是固定周期时间生成一个日志文件，比如，默认情况是每天生成一个文件。
log4j.appender.ServerDailyRollingFile=org.apache.log4j.RollingFileAppender 
#DatePattern是配置在日志文件后添加怎样的后缀，一般添加日期
#log4j.appender.ServerDailyRollingFile.DatePattern='.'yyyy-MM-dd
#日志的存放位置，如果不存在，则会自动创建一个这样的目录和文件
log4j.appender.ServerDailyRollingFile.File=logs/app.log
#如果要在当前工程根目录下，生成日志文件，则可以写成 =logs/app.log 。如果logs文件夹不存在，系统会自动在根目录下，自动创建一个logs文件夹，在logs里自动生成app.log日志文件。
log4j.appender.ServerDailyRollingFile.layout=org.apache.log4j.PatternLayout
#最大文件50MB
log4j.appender.ServerDailyRollingFile.MaxFileSize=30MB
#备份15个文件
log4j.appender.ServerDailyRollingFile.MaxBackupIndex=9
#配置输出到文件编码
log4j.appender.ServerDailyRollingFile.Encoding=UTF-8
#日志信息的格式，如我的配置会生成
#[ERROR] 2017-08-24 17:21:32(0) --> [main] log4j.Main.<init>(Main.java:14): java.lang.ArithmeticException: / by zero
#[%-5p]：级别；%d{yyyy-MM-dd HH:mm:ss}：时间格式；（%r）：自程序启动到输出日志所用的时间；[%t]:输出产生该日志事件的线程名 ;
#%l:输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)
#%m:日志信息；%x:输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中;%n:换行
log4j.appender.ServerDailyRollingFile.layout.ConversionPattern =[%-5p] %d{yyyy-MM-dd HH:mm:ss}(%r) --> [%t] %l: %m %x %n
log4j.appender.ServerDailyRollingFile.Append=true

log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
log4j.appender.stdout.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH:mm:ss}(%r) --> [%t] %l: %m %x %n